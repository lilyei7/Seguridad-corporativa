from maintenance.models import MaintenanceReport, MaintenanceArea
from django.contrib.auth.models import User
from accounts.models import Notification

area = MaintenanceArea.objects.first()
user = User.objects.get(username='1')

report = MaintenanceReport.objects.create(
    title='Tercera prueba notificaciones',
    description='Probando el sistema con el error de priority arreglado',
    category='electricidad',
    area=area,
    reported_by=user,
    contact_email='test@example.com',
    priority=1
)

print(f'Reporte creado: {report.id} - {report.title}')
print(f'Notificaciones creadas: {Notification.objects.filter(maintenance_report=report).count()}')

notif = Notification.objects.filter(maintenance_report=report).first()
if notif:
    print(f'Notificaci√≥n: {notif.title} - Para: {notif.recipient.username}')
else:
    print('No se encontraron notificaciones')
    
    # 1. Verificar usuarios administradores
    print("\n1Ô∏è‚É£ VERIFICANDO USUARIOS ADMINISTRADORES...")
    admin_users = User.objects.filter(
        is_superuser=True
    )
    print(f"   Superusuarios encontrados: {admin_users.count()}")
    
    for admin in admin_users:
        print(f"   - {admin.username} ({admin.email or 'Sin email'})")
    
    # 2. Crear notificaci√≥n de prueba
    print("\n2Ô∏è‚É£ CREANDO NOTIFICACI√ìN DE PRUEBA...")
    if admin_users.exists():
        admin = admin_users.first()
        
        test_notification = Notification.objects.create(
            recipient=admin,
            title="üß™ PRUEBA: Nuevo Reporte de Mantenimiento Urgente",
            message=(
                "Este es un reporte de prueba para verificar el sistema de notificaciones.\n\n"
                "üìã T√≠tulo: Falla en sistema el√©ctrico\n"
                "üìÇ Categor√≠a: El√©ctrico\n"
                "‚≠ê Prioridad: Cr√≠tica\n"
                "üìç √Årea: Lobby Principal\n"
                "üë§ Reportado por: Sistema de Pruebas\n"
                "üìß Contacto: prueba@mantenimiento.com\n\n"
                "üîß Por favor, revisa este reporte de prueba lo antes posible."
            ),
            notification_type='maintenance_request',
            priority='urgent',
            action_url='/maintenance/reports/'
        )
        
        print(f"   ‚úÖ Notificaci√≥n creada con ID: {test_notification.id}")
        print(f"   üìß Destinatario: {admin.username}")
        print(f"   üéØ Prioridad: {test_notification.priority}")
        
    else:
        print("   ‚ùå No se encontraron usuarios administradores")
        return False
    
    # 3. Verificar conteo de notificaciones
    print("\n3Ô∏è‚É£ VERIFICANDO CONTEO DE NOTIFICACIONES...")
    unread_count = Notification.objects.filter(
        recipient=admin,
        is_read=False,
        notification_type='maintenance_request'
    ).count()
    
    print(f"   üìä Notificaciones no le√≠das de mantenimiento: {unread_count}")
    
    # 4. Crear √°rea de prueba si no existe
    print("\n4Ô∏è‚É£ VERIFICANDO √ÅREAS DE MANTENIMIENTO...")
    test_area, created = MaintenanceArea.objects.get_or_create(
        name="√Årea de Pruebas",
        defaults={
            'description': '√Årea creada para pruebas del sistema de notificaciones',
            'location': 'Sistema de Pruebas'
        }
    )
    
    if created:
        print(f"   ‚úÖ √Årea creada: {test_area.name}")
    else:
        print(f"   üìç √Årea existente: {test_area.name}")
    
    # 5. Crear reporte de prueba
    print("\n5Ô∏è‚É£ CREANDO REPORTE DE MANTENIMIENTO DE PRUEBA...")
    
    # Buscar un usuario inquilino o crear uno temporal
    test_user = admin  # Usar admin como usuario de prueba
    
    test_report = MaintenanceReport.objects.create(
        title="üß™ PRUEBA - Sistema de Notificaciones",
        description=(
            "Este es un reporte de prueba creado autom√°ticamente para verificar "
            "que el sistema de notificaciones funciona correctamente.\n\n"
            "Caracter√≠sticas de la prueba:\n"
            "- Prioridad cr√≠tica para probar alertas urgentes\n"
            "- Notificaciones autom√°ticas a administradores\n"
            "- Verificaci√≥n de badges y contadores\n"
            "- Prueba de sonidos y alertas visuales\n\n"
            "Si recibes esta notificaci√≥n, el sistema est√° funcionando correctamente."
        ),
        category='electrico',
        priority=1,  # 1 = Cr√≠tica
        area=test_area,
        reported_by=test_user,
        contact_email='prueba@sistema.com',
        status='pendiente'
    )
    
    print(f"   ‚úÖ Reporte creado con ID: {test_report.id}")
    print(f"   üìã T√≠tulo: {test_report.title}")
    print(f"   ‚≠ê Prioridad: {test_report.get_priority_display()}")
    
    # 6. Probar funci√≥n de notificaci√≥n
    print("\n6Ô∏è‚É£ PROBANDO FUNCI√ìN DE NOTIFICACI√ìN...")
    try:
        from maintenance.views import notify_admins_new_report
        notifications_sent = notify_admins_new_report(test_report)
        
        if notifications_sent:
            print("   ‚úÖ Notificaciones enviadas exitosamente")
        else:
            print("   ‚ö†Ô∏è Problemas enviando notificaciones")
            
    except Exception as e:
        print(f"   ‚ùå Error en funci√≥n de notificaci√≥n: {e}")
    
    # 7. Verificar notificaciones finales
    print("\n7Ô∏è‚É£ VERIFICACI√ìN FINAL...")
    final_count = Notification.objects.filter(
        recipient=admin,
        is_read=False,
        notification_type='maintenance_request'
    ).count()
    
    print(f"   üìä Total notificaciones no le√≠das: {final_count}")
    
    # 8. Mostrar resumen
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE LA PRUEBA:")
    print(f"   üéØ Notificaciones creadas: {final_count}")
    print(f"   üìß Administradores notificados: {admin_users.count()}")
    print(f"   üìä Reporte de prueba ID: {test_report.id}")
    print("   ‚úÖ Sistema de notificaciones OPERATIVO")
    
    print("\nüîî INSTRUCCIONES PARA VER LAS NOTIFICACIONES:")
    print("   1. Inicia sesi√≥n como administrador")
    print("   2. Observa la campana de notificaciones en el header")
    print("   3. Ve el badge rojo en 'Reportes de Inquilinos'")
    print("   4. Visita /accounts/notifications/ para ver todas las notificaciones")
    print("   5. El sistema debe mostrar alertas toast autom√°ticamente")
    
    return True


if __name__ == "__main__":
    test_notification_system()
